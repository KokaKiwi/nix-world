print_info() {
  info title
  info underline

  info "OS" distro
  info "Host" model
  info "Kernel" kernel
  info "Init" init
  info "Uptime" uptime

  prin

  info "CPU" cpu
  info "GPU" gpu
  info "Memory" memory
  info "Disk" disk

  prin

  info "Resolution" resolution
  info "DE" kde
  info "WM" wm
  info "WM Theme" wm_theme
  info "Theme" theme
  info "Icons" icons
  info "Font" font

  prin

  info "Terminal" term_full
  info "Terminal Font" term_font
  info "Shell" shell
  info "Locale" locale

  prin

  info "Python" python
  info "Rust" rust
  info "Nix" nix

  info cols
}

disk_show=('/' '/home')
disk_subtitle="mount"

gtk2="off"

memory_percent='on'
memory_unit='GiB'

speed_shorthand="on"
speed_type="scaling_max_freq"

get_icontitle() {
  icon=$(printf '\xEF\x8C\x83')

  get_title
  icontitle=" $icon $title"
}

get_python() {
  python="$(/usr/bin/python -V)"
}

get_rust() {
  rust=$(rustup run stable rustc -V)
}

get_nix() {
  nix=$(@nix@/bin/nix --version)
}

get_kde() {
  plasma_vers=$(plasmashell --version | awk '{ print $2 }')
  kdeapps_vers=$(konsole --version | awk '{ print $2 }')

  kde="Plasma $plasma_vers / KDE Apps $kdeapps_vers"
}

get_theme() {
  name="gtk-theme-name"
  gsettings="gtk-theme"
  gconf="gtk_theme"
  xfconf="/Net/ThemeName"
  kde="Name"

  get_style

  kde_theme="$(kreadconfig5 --file plasmarc --group Theme --key name)"
  kde_theme+=" [Plasma]"

  theme="${kde_theme}, ${gtk3_theme}"
  theme="${theme%, }"
}

get_term_full() {
  term_full="KiTTY $(kitty --version | awk '{ print $2 }')"
}

get_kernel() {
  kernel_ver="$(@gawk@/bin/awk '{ print $3 }' /proc/version)"
  kernel_name="$(cat /proc/version-name)"

  prin "Kernel" "$kernel_ver"
  [[ "$kernel_name" != "" ]] && prin "Kernel codename" "$kernel_name" || true
}

get_init() {
  init="$(/usr/lib/systemd/systemd --version | head -n 1)"
}

get_gpu() {
  # Read GPUs into array.
  gpu_cmd="$(@pciutils@/bin/lspci -mm |
             awk -F '\"|\" \"|\\(' \
                    '/"Display|"3D|"VGA/ {
                        a[$0] = $1 " " $3 " " ($7 ~ /^$|^Device [[:xdigit:]]+$/ ? $4 : $7)
                        a[$0] = $1 " " $3 " " $4
                    }
                    END { for (i in a) {
                        if (!seen[a[i]]++) {
                            sub("^[^ ]+ ", "", a[i]);
                            print a[i]
                        }
                    }}')"
  IFS=$'\n' read -d "" -ra gpus <<< "$gpu_cmd"

  # Remove duplicate Intel Graphics outputs.
  # This fixes cases where the outputs are both
  # Intel but not entirely identical.
  #
  # Checking the first two array elements should
  # be safe since there won't be 2 intel outputs if
  # there's a dedicated GPU in play.
  [[ "${gpus[0]}" == *Intel* && "${gpus[1]}" == *Intel* ]] && unset -v "gpus[0]"

  for gpu in "${gpus[@]}"; do
      # GPU shorthand tests.
      [[ "$gpu_type" == "dedicated" && "$gpu" == *Intel* ]] || \
      [[ "$gpu_type" == "integrated" && ! "$gpu" == *Intel* ]] && \
          { unset -v gpu; continue; }

      case $gpu in
          *"NVIDIA"*)
              gpu="${gpu/*\[}"
              gpu="${gpu/\]*}"
              gpu="NVIDIA $gpu"
          ;;

          *"Intel"*)
              gpu="${gpu/*Intel/Intel}"
              gpu="${gpu/\(R\)}"
              gpu="${gpu/Corporation}"
              gpu="${gpu/ \(*}"
              gpu="${gpu/Integrated Graphics Controller}"
              gpu="${gpu/*Xeon*/Intel HD Graphics}"

              [[ -z "$(trim "$gpu")" ]] && gpu="Intel Integrated Graphics"
          ;;

          *) continue ;;
      esac

      if [[ "$gpu_brand" == "off" ]]; then
          gpu="${gpu/AMD }"
          gpu="${gpu/NVIDIA }"
          gpu="${gpu/Intel }"
      fi

      prin "${subtitle:+${subtitle}${gpu_name}}" "$gpu"
  done
}

# vim: set ft=sh :
